(setf database1 
'(
  (b1 shape brick)
  (b1 color grey)
  (b1 size extra-small)
  (b1 supports nil)
  (b1 above b2)
  (b1 above b3)
  (b2 shape brick)
  (b2 color blue)
  (b2 size small)
  (b2 supports b1)
  (b2 left-of b3)
  (b2 below b1)
  (b3 shape brick)
  (b3 color green)
  (b3 size medium-small)
  (b3 supports b1)
  (b3 right-of b2)
  (b3 below b1)
  (b4 shape brick)
  (b4 color yellow)
  (b4 size medium)
  (b4 supports b2)
  (b4 supports b3)
  (b4 below b2)
  (b4 below b3)
 )
)

(setf db database1)

(defun fetch (args) 
 (if (listp args)
   (if (not (wrongsize args))
     (getdata args)
	 (format nil "fetch argument contained TOO ~A data for current database" (wrongsize args))
	) 
   (format nil "fetch only accepts a list as its argument" nil)
 ) 
)

(defun wrongsize (arglist)
  (cond ((> (length arglist) (length (car db))) 'many)
        ((< (length arglist) (length (car db))) 'few)
        (t nil)		
  )
)

(defun indexof (thisin listin)
 (if (member thisin listin)
    (- (length listin) (length (member thisin listin)))
    ()
 )
)

(defun getdata (args)
  (setf result nil) 
  (loop for dataset in db do
    (if 
	  (every #'(lambda (arg) 
	    (if (or (equal arg '?)(equal (indexof arg dataset) (indexof arg args)))
          t nil)) 
	  args)
      
	  (setf result (append result (list dataset)))
      ()
    )
  )
  result
)

