(defun throwdice (n)
  (setf sum 0)
  (setf roll 0)
  (setf report '-)
  (defun rolldie ()
    (setf roll (+ (random 6) 1))
    (setf sum (+ sum roll))
    roll
  )
  (defun dumpdata (str)
    (cond ((or (equal sum 7) (equal sum 11)) (setf report 'instant-win))
          ((or (equal sum 12) (equal sum 2) (equal sum 3)) (setf report 'instant-loss))
          (t 'nothing)
    )
    (list results str 'your-roll= sum report)
  )
  (if (> n 0) (setf result (list (rolldie))) nil)
  (if (> n 1) (setf results (cons (rolldie) result)) nil)
  (if (> n 2)
    (loop for nextroll from 3 to n
      do (setf results (cons (rolldie) results))
    )
    nil
  )
  (if (> n 0 )
    (if (equal n 1) result
      (if (equal n 2)
        (cond ((and (equal (first results) 1) (equal (cadr results) 1)) (dumpdata 'snake-eyes))
              ((and (equal (first results) 6) (equal (cadr results) 6)) (dumpdata 'boxcars))
              (t (dumpdata '-))
        )
       (dumpdata '-)
      )
    )
   nil
  )
)
