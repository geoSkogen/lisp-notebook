(setf rooms
  '(
    (grey-room (east black-room)
               (south white-room)
               (south-east (door locked grey) (stairway clear downward-leading) rainbow-room)
               grey)
    (black-room (west grey-room)
                (south-east (box unlocked black) (key pink) (key black))
                black)
    (white-room (north grey-room)
                (east pink-room)
                white)
    (pink-room (west white-room)
               (north-west (door locked pink) (stairway clear downward-leading) red-room)
                pink)
    (red-room (south green-room)
              (east orange-room)
              (south-east (stairway clear upward-leading) pink-room)
              red)
    (orange-room (west red-room)
                 (east yellow-room)
                 orange)
    (yellow-room (west orange-room)
                 (south (door locked black) aquamarine-room)
                 aquamarine)
    (green-room (north red-room)
                (south blue-room)
                green)
    (rainbow-room (east aquamarine-room)
                  (south indigo-room)
                  (north-west (door locked rainbow) (stairway clear upward-leading) grey-room)
                  rainbow)
    (aquamarine-room (north yellow-room)
                     (west (box locked aquamarine) (key turquoise))
                     aquamarine)
    (turquoise-room (west (door locked turquoise) rainbow-room)
                    (south violet-room))
    (blue-room (north green-room)
               (east indigo-room)
               blue)
    (indigo-room (north (door locked indigo) rainbow-room)
                 (west blue-room)
                 (east violet-room)
                 indigo)
    (violet-room (north turquoise-room)
                 (east indigo-room)
                 violet)
))

(setf north 'north)
(setf east 'east)
(setf west 'west)
(setf south 'south)
(setf northeast 'north-east)
(setf southeast 'south-east)
(setf northwest 'north-west)
(setf southwest 'south-west)

(setf currentroom 'grey-room)
(setf currentobj 'none)
(setf encountering 'none)
(setf storedir 'none)
(setf foundobject 'none)
(setf gear nil)
(setf unlocked nil)
(setf encadj 'none)
(setf encnoun 'none)
(setf objadj 'none)
(setf objnoun 'none)

(defun whichroom ()
  (list 'you 'are 'in 'the currentroom)
)

(defun gooddirections (dir)
  (setf testagainst (rest (reverse (rest (assoc currentroom rooms)))))
  (cadr (assoc dir testagainst))
)

(defun wrongway (dir)
  (setf color (car (last (assoc currentroom rooms))))
  (list 'to 'the dir 'there 'is 'a color 'wall )
)

(defun setnewroom (dir)
  (setf currentroom (cadr (assoc dir (cdr (assoc currentroom rooms)))))
  (whichroom)
)

(defun encounter (dir)
  (setf storedir dir)
  (setf encountering (cadr (assoc dir (cdr (assoc currentroom rooms)))))
  (setf encadj (car (last encountering)))
  (setf encnoun (first encountering))
  (list 'you 'found 'the encadj encnoun 'to 'the dir)
)

(defun findobject (this)
  (setf foundobject this)
  (setf objadj (car (last this)))
  (setf objnoun (first this))
  (if (or (not (listp gear)) (not (member foundobject gear)))
      (list 'you 'found 'the objadj objnoun 'in 'the encadj encnoun)
      '(nothing to see here)
  )
)

(defun take ()
  (if (not (equal foundobject 'none))
    (setf gear (cons foundobject gear))
    (if (not (equal encountering 'none))
      (list 'cannot 'take 'the encadj encnoun 'with 'you)
      '(nothing to take here)
    )
  )
)

(defun move (dir)
  (setf storedir 'none)
  (setf encountering 'none)
  (setf foundobject 'none)
  (setf encadj 'none)
  (setf encnoun 'none)
  (setf objadj 'none)
  (setf objnoun 'none)

  (defun baddirections (stringin)
    (setf badinput nil)
    (setf eightway '(north north-west west south-west south south-east east north-east))
      (if (not (member stringin eightway)) (setf badinput t))
      badinput
  )
  (if (baddirections dir) '(enter a cardinal direction - like south or south-west - as an arugument ) (getnewroom dir))
)

(defun getnewroom (dir)
  (if (gooddirections dir)
    (if (not (listp (cadr (assoc dir (cdr (assoc currentroom rooms))))))
      (setnewroom dir)
      (encounter dir)
    )
    (wrongway dir)
  )
)

(defun enter ()
  (setf canenter '(door stairway))
  (if (equal encountering 'none)
    '(no entryway is present)
     (if (not (member (first encountering) canenter))
        (list 'cannot 'enter (first encountering) '- 'try 'to 'checkitout 'instead)
        (if (member 'locked encountering)
          (list (first encountering) 'is 'locked)
          (car (rest (member encountering (assoc storedir (cdr (assoc currentroom rooms))))))
        )
     )
  )
)

(defun checkitout ()
  (if (equal encountering 'none)
   '(no object is present)
    (if (member 'stairway encountering)
      '(stairway is clear of obstacles)
      (if (member 'locked encountering)
        (list (first encountering) 'is 'locked)
        (checkingout (car (rest (member encountering (assoc storedir (cdr (assoc currentroom rooms)))))))
        ;(findobject (car (rest (member encountering (assoc storedir (cdr (assoc currentroom rooms)))))))
      )
    )
  )
)

(defun checkingout (this)
  ;choose between finding an object or having an encounter
  (if (equal (length this) 2) (findobject this) '(zappa))
)
